import os
from GBC.utils.base.config_class import configclass

PROJECT_ROOT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "..", "..")


@configclass
class DataPathsCfg:
    root_path: str = PROJECT_ROOT_DIR

    dataset_path: str = "/home/turin/sjtu/dataset"
    # The following datasets are not generated by these scripts, (generally) put under the dataset directory
    # And the following attributes are only relative path to dataset_path unless otherwise specified
    list_add_dataset_path: list[str] = ["urdf", "smplh_model", "dmpls_model", "amass_dataset", "extra_accad"]
    # urdf_path: str = "unitree_ros/robots/h1_2_description/h1_2.urdf"
    urdf_path: str = "turin_urdf/turin_humanoid_robot/turin_v3_02/urdf/turin_humanoid_29dof_v3_2.urdf"
    smplh_model_path: str = "smplh/male/model.npz"
    dmpls_model_path: str = "dmpls/male/model.npz"
    amass_dataset_path: str = "AMASS_FULL/"

    extra_accad_path: str = "amass_accad_data/"

    # The following results are generated by these scripts, so relative paths to the PROJECT_ROOT_DIR are shown
    list_add_root_path: list[str] = ["smplh_fit_result", "pose_transformer", "converted_actions", "ref_data"]
    smplh_fit_result_path: str = "fit_h1_2/best_fit.pt"
    pose_transformer_path: str = "fit_h1_2/models/04_18_05_epoch_340.pt"
    converted_actions_path: str = "output/h1_2/converted_actions"
    # ref_data_path: list[str] = ["output/h1_2/converted_actions/ACCAD/Female1Walking_c3d"]
    # ref_data_path: list[str] = ["output/h1_2/converted_actions/ACCAD/Female1Walking_c3d/B3 - walk1_poses.pkl"]
    # ref_data_path: list[str] = ["output/converted_actions/turin_v3/ACCAD/Female1Walking_c3d/B1 - stand to walk_poses.pkl", "output/converted_actions/turin_v3/ACCAD/Female1Walking_c3d/B1 - stand to walk_poses_flipped.pkl"]
    ref_data_path: list[str] = ["output/converted_actions/turin_v3/ACCAD/Male2MartialArtsKicks_c3d/G8 -  roundhouse left_poses.pkl", "output/converted_actions/turin_v3/ACCAD/Male2MartialArtsKicks_c3d/G8 -  roundhouse left_poses_flipped.pkl"]
    # ref_data_path: list[str] = ["output/generation_templates/fit_turin_v3/converted_actions/ACCAD/Male1Walking_c3d/Walk B13 - Walk turn right 45_poses.pkl", "output/generation_templates/fit_turin_v3/converted_actions/ACCAD/Male1Walking_c3d/Walk B13 - Walk turn right 45_poses_flipped.pkl", "output/generation_templates/fit_turin_v3/converted_actions/ACCAD/Male2Walking_c3d/B5 -  Walk backwards_poses.pkl", "output/generation_templates/fit_turin_v3/converted_actions/ACCAD/Male2Walking_c3d/B5 -  Walk backwards_poses_flipped.pkl"]


    def __post_init__(self):
        # Add prefix to their paths except absolute ones
        for list_add_attr in dir(self):
            if list_add_attr[:9] != "list_add_":
                continue
            prefix_attr = list_add_attr[9:]
            if not hasattr(self, prefix_attr):
                continue
            # Get prefix and attributes that need to be added with the prefix
            prefix = getattr(self, prefix_attr)
            attrs = getattr(self, list_add_attr)
            for attr in attrs:
                path = getattr(self, f"{attr}_path")
                if isinstance(path, list):
                    path = list(map(lambda x: self.__add_prefix(x, prefix), path))
                else:
                    path = self.__add_prefix(path, prefix)
                setattr(self, f"{attr}_path", path)

    def __add_prefix(self, path, prefix):
        return path if os.path.isabs(path) else os.path.join(prefix, path)



DATA_PATHS = DataPathsCfg(
    dataset_path="/home/turin/sjtu/dataset",
    # extra_accad_path="/home/yifei/Downloads/amass_accad_data",
)
# print(DATA_PATHS)